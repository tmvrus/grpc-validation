// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetCarsForSaleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCarsForSaleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetYearFrom() <= 1980 {
		return GetCarsForSaleRequestValidationError{
			field:  "YearFrom",
			reason: "value must be greater than 1980",
		}
	}

	// no validation rules for YearTo

	if l := len(m.GetColor()); l < 1 || l > 3 {
		return GetCarsForSaleRequestValidationError{
			field:  "Color",
			reason: "value must contain between 1 and 3 items, inclusive",
		}
	}

	_GetCarsForSaleRequest_Color_Unique := make(map[string]struct{}, len(m.GetColor()))

	for idx, item := range m.GetColor() {
		_, _ = idx, item

		if _, exists := _GetCarsForSaleRequest_Color_Unique[item]; exists {
			return GetCarsForSaleRequestValidationError{
				field:  fmt.Sprintf("Color[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_GetCarsForSaleRequest_Color_Unique[item] = struct{}{}
		}

		if _, ok := _GetCarsForSaleRequest_Color_InLookup[item]; !ok {
			return GetCarsForSaleRequestValidationError{
				field:  fmt.Sprintf("Color[%v]", idx),
				reason: "value must be in list [red green black white]",
			}
		}

	}

	if m.GetMileageFrom() <= 0 {
		return GetCarsForSaleRequestValidationError{
			field:  "MileageFrom",
			reason: "value must be greater than 0",
		}
	}

	if m.GetMileageTo() >= 1000000 {
		return GetCarsForSaleRequestValidationError{
			field:  "MileageTo",
			reason: "value must be less than 1000000",
		}
	}

	if l := utf8.RuneCountInString(m.GetVendor()); l < 5 || l > 100 {
		return GetCarsForSaleRequestValidationError{
			field:  "Vendor",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetModel()); l < 5 || l > 100 {
		return GetCarsForSaleRequestValidationError{
			field:  "Model",
			reason: "value length must be between 5 and 100 runes, inclusive",
		}
	}

	return nil
}

// GetCarsForSaleRequestValidationError is the validation error returned by
// GetCarsForSaleRequest.Validate if the designated constraints aren't met.
type GetCarsForSaleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCarsForSaleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCarsForSaleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCarsForSaleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCarsForSaleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCarsForSaleRequestValidationError) ErrorName() string {
	return "GetCarsForSaleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCarsForSaleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCarsForSaleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCarsForSaleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCarsForSaleRequestValidationError{}

var _GetCarsForSaleRequest_Color_InLookup = map[string]struct{}{
	"red":   {},
	"green": {},
	"black": {},
	"white": {},
}

// Validate checks the field values on GetCarsForSaleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCarsForSaleResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetCarsForSaleResponseValidationError is the validation error returned by
// GetCarsForSaleResponse.Validate if the designated constraints aren't met.
type GetCarsForSaleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCarsForSaleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCarsForSaleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCarsForSaleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCarsForSaleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCarsForSaleResponseValidationError) ErrorName() string {
	return "GetCarsForSaleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCarsForSaleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCarsForSaleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCarsForSaleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCarsForSaleResponseValidationError{}
