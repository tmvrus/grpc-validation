// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CarShopClient is the client API for CarShop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarShopClient interface {
	GetCarsForSale(ctx context.Context, in *GetCarsForSaleRequest, opts ...grpc.CallOption) (*GetCarsForSaleResponse, error)
}

type carShopClient struct {
	cc grpc.ClientConnInterface
}

func NewCarShopClient(cc grpc.ClientConnInterface) CarShopClient {
	return &carShopClient{cc}
}

func (c *carShopClient) GetCarsForSale(ctx context.Context, in *GetCarsForSaleRequest, opts ...grpc.CallOption) (*GetCarsForSaleResponse, error) {
	out := new(GetCarsForSaleResponse)
	err := c.cc.Invoke(ctx, "/api.CarShop/GetCarsForSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarShopServer is the server API for CarShop service.
// All implementations must embed UnimplementedCarShopServer
// for forward compatibility
type CarShopServer interface {
	GetCarsForSale(context.Context, *GetCarsForSaleRequest) (*GetCarsForSaleResponse, error)
	mustEmbedUnimplementedCarShopServer()
}

// UnimplementedCarShopServer must be embedded to have forward compatible implementations.
type UnimplementedCarShopServer struct {
}

func (*UnimplementedCarShopServer) GetCarsForSale(context.Context, *GetCarsForSaleRequest) (*GetCarsForSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarsForSale not implemented")
}
func (*UnimplementedCarShopServer) mustEmbedUnimplementedCarShopServer() {}

func RegisterCarShopServer(s *grpc.Server, srv CarShopServer) {
	s.RegisterService(&_CarShop_serviceDesc, srv)
}

func _CarShop_GetCarsForSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsForSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarShopServer).GetCarsForSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CarShop/GetCarsForSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarShopServer).GetCarsForSale(ctx, req.(*GetCarsForSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CarShop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CarShop",
	HandlerType: (*CarShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCarsForSale",
			Handler:    _CarShop_GetCarsForSale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
